<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JS异步的另一种操作</title>
    <link href="/2022/03/31/JS%E5%BC%82%E6%AD%A5%E8%AE%BF%E9%97%AE%E7%9A%84%E5%8F%A6%E4%B8%80%E7%A7%8D%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/03/31/JS%E5%BC%82%E6%AD%A5%E8%AE%BF%E9%97%AE%E7%9A%84%E5%8F%A6%E4%B8%80%E7%A7%8D%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<p>直接上代码。</p><figure class="highlight js"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> targetURL=<span class="hljs-string">&#x27;https://jsdrp.ltdoge.top/gh/LtD0gE/MetingJS/source/custom.json&#x27;</span>;<br>fetch(targetURL)<br>.then(<span class="hljs-function"><span class="hljs-params">resp</span> =&gt;</span> resp.json())<br>.then(<span class="hljs-function"><span class="hljs-params">custom</span> =&gt;</span> SomeArrayObJect.unshift(custom));<br></code></pre></td></tr></table></figure><p>这里使用Promise对象进行异步操作，它是ECMAScript 6引入的一个功能，旨在更优雅地进行异步操作，同时方便了代码编写和维护。</p><p>以及…</p><p><img src="https://pic.imgdb.cn/item/62456a4f27f86abb2a49f4ed.jpg" alt="" /></p><p>再送IE一程。如上图所示，IE完全不支持Promise，落后全世界整整七年（ECMAScript 6于2015年6月正式通过，成为国际标准）。图片截取自<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7">MDN Web Docs - Promise</a>。</p><p>也许有些小朋友要问了：“这种操作用回调函数不香吗，为啥还要搞Promise？”</p><p><img src="https://pic.imgdb.cn/item/62456c1f27f86abb2a4d85e0.jpg" alt="" /></p><p>那多步回调呢？</p><p>我们试试多层嵌套函数，带点小变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">Func_0(varA,Func_1(Func_2(varB,Func_4(varD,varE,Func_5(varF,Func_6(...)))),Func_3(varC),varD))<br></code></pre></td></tr></table></figure><p>写在单行里复杂的要死，写成多行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">Func_0(varA, <br>    Func_1(<br>        Func_2(varB, <br>            Func_4(varD, varE, <br>                Func_5(varF, <br>                    Func_6(varG)))), <br>        Func_3(varC), varD))<br></code></pre></td></tr></table></figure><p>好看了点，但是以后不好维护，变量名很长或者直接传入大段字符串的时候更难办。</p><p>如果用上Promise，会怎么样呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//先把Func_x函数转为Promise对象：</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Func_x</span>(<span class="hljs-params">varA,varB,...</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;<br>        <span class="hljs-comment">// some code</span><br>        <span class="hljs-comment">// varA、varB在此使用</span><br>        resolve(varC); <span class="hljs-comment">//执行完成调用resolve函数</span><br>        <span class="hljs-comment">// reject(varD,...)</span><br>    &#125;)<br>&#125;<br><span class="hljs-comment">// ...</span><br>Func_2(varA)<br>.then(Func_1)<br>.then(Func_0)<br></code></pre></td></tr></table></figure><p>从上面代码的最后三行可以看出，用Promise进行异步操作在代码书写上是一种连续的结构，利于书写的同时也利于阅读。比函数嵌套那种“飞流直下三千尺”的现象好多了。</p><p>当一个Promise函数下方有then时，resolve() 会向then中的函数传递<strong>仅一个</strong>参数。如果下面不再有then，则返回一个Promise对象。除此之外，resolve() 还会将当前Promise的状态设置为fulfilled。</p><p>下面的代码是需要向Promise过程中传递外部参数，且需要向then中传递多个参数时的解决方案，应该是比较常见的情景。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> f=<span class="hljs-number">4</span> <span class="hljs-comment">//这是外部参数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;<br>        <span class="hljs-keyword">var</span> a=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">var</span> b=<span class="hljs-number">2</span><br>        <span class="hljs-keyword">var</span> pass=&#123;<span class="hljs-attr">aa</span>:a+b, <span class="hljs-attr">bb</span>:f&#125; <span class="hljs-comment">//键值对用于传递多个参数，也可用方括号数组代替</span><br>        resolve(pass)<br>    &#125;)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">b</span>(<span class="hljs-params">recv</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;<br>        <span class="hljs-keyword">var</span> c=<span class="hljs-number">3</span><br>        <span class="hljs-keyword">var</span> d=recv[<span class="hljs-string">&quot;aa&quot;</span>]<br>        <span class="hljs-keyword">var</span> e=recv[<span class="hljs-string">&quot;bb&quot;</span>]<br><span class="hljs-comment">//        console.warn(recv)</span><br><span class="hljs-comment">//        console.warn(d)</span><br><span class="hljs-comment">//        console.warn(e)</span><br>        <span class="hljs-built_in">console</span>.log(c+d+e)<br>        resolve()<br>    &#125;)<br>&#125;<br><br>a() <span class="hljs-comment">//a函数中的resolve(pass) 将pass传递给b函数</span><br>.then(b) <span class="hljs-comment">//b函数下方没有then，resolve()返回b函数的Promise对象</span><br><br><span class="hljs-comment">//a+b+c+f = 1+2+3+4 = 10，控制台输出即为10</span><br></code></pre></td></tr></table></figure><p>那Promise对象里的resolve() 和reject() 有啥区别呢</p><p><img src="https://pic.imgdb.cn/item/6245818527f86abb2a775809.jpg" alt="" /></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calc</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(b == <span class="hljs-number">0</span>) reject(<span class="hljs-string">&quot;Divided by zero!&quot;</span>);<br>        resolve(a/b);<br>    &#125;)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">output</span>(<span class="hljs-params">result</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(result);<br>        resolve();<br>    &#125;)<br>&#125;<br>calc(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>)<br>.then(output)<br>.catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-built_in">console</span>.error(err))<br>.finally(<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Completed!&quot;</span>))<br><span class="hljs-comment">//控制台输出：</span><br><span class="hljs-comment">// 2</span><br><span class="hljs-comment">// Completed!</span><br>calc(<span class="hljs-number">2</span>,<span class="hljs-number">0</span>)<br>.then(output)<br>.catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-built_in">console</span>.error(err))<br>.finally(<span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;Completed!&quot;</span>))<br><span class="hljs-comment">//控制台输出：</span><br><span class="hljs-comment">// Divided by zero!        (报错)</span><br><span class="hljs-comment">// Completed!</span><br></code></pre></td></tr></table></figure><p>从第二次Promise可以看出，reject() 的作用其实和throw差不多，就是抛出一个异常。但reject() 还会打断接下来的Promise过程，并将当前Promise过程的状态设置为rejected。既没有resolve() 也没有reject() 的Promise状态叫作pending，它是Promise创建时的初始状态。</p><p>而reject() 抛出的异常，会一直向后传递，直到被catch() 函数捕获。如果异常未捕获，JS解释器则会输出错误信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">Uncaught (in promise) 抛出的异常原因<br></code></pre></td></tr></table></figure><p>不管这个Promise过程是fulfilled、relected还是pending，finally() 函数总是会在Promise过程结束时开始执行。异步操作完成时如果需要上报信息，可以写在finally里面，而不用then和catch各写一份。</p><p>如果我们需要多个异步任务并行，在它们全部完成后继续执行下一步操作，该怎么写呢？</p><p>我们可以用forEach配合Promise实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> results=[]<br><span class="hljs-keyword">var</span> params=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">aa</span>(<span class="hljs-params">num</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>)</span>&#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-built_in">console</span>.log(num);<br>            resolve();<br>        &#125;,<span class="hljs-number">2000</span>);<br>    &#125;)<br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-keyword">async</span>=[]<br>params.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">param</span>)</span>&#123;<br>    <span class="hljs-keyword">async</span>.push(aa(param))<br>&#125;)<br><span class="hljs-built_in">Promise</span>.all(<span class="hljs-keyword">async</span>).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;done&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><p>执行以上代码，控制台在2秒后同时输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">1<br>2<br>3<br>done<br></code></pre></td></tr></table></figure><p>对了，关于文章开头那段代码里的这个结构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">(varA,varB) =&gt; &#123;...&#125;<br></code></pre></td></tr></table></figure><p>这是ECMAScript 6引入的箭头函数。比如以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">func = <span class="hljs-function">(<span class="hljs-params">a,b</span>) =&gt;</span> &#123;<span class="hljs-built_in">console</span>.log(a+b)&#125;<br></code></pre></td></tr></table></figure><p>等效于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a+b)<br>&#125;<br></code></pre></td></tr></table></figure><p>当只传递一个参数时，圆括号可以省略。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">func = <span class="hljs-function"><span class="hljs-params">a</span> =&gt;</span> &#123;<span class="hljs-built_in">console</span>.log(a)&#125;<br><span class="hljs-comment">//等效于</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span>(<span class="hljs-params">a</span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(a)<br>&#125;<br></code></pre></td></tr></table></figure><p>不带花括号时，执行此函数会返回箭头后的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">func = <span class="hljs-function">(<span class="hljs-params">a,b</span>) =&gt;</span> a+b<br><span class="hljs-comment">//等效于</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> a+b<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">func = <span class="hljs-function">(<span class="hljs-params">a,b</span>) =&gt;</span> func2(a,b)<br><span class="hljs-comment">//等效于</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> func2(a,b)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>未分类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>做了个JSDelivr反代</title>
    <link href="/2022/03/28/%E5%81%9A%E4%BA%86%E4%B8%AAjsdelivr%E5%8F%8D%E4%BB%A3/"/>
    <url>/2022/03/28/%E5%81%9A%E4%BA%86%E4%B8%AAjsdelivr%E5%8F%8D%E4%BB%A3/</url>
    
    <content type="html"><![CDATA[<p>JSDelivr因ICP执照被吊销，国内访问被迫转全球线路已经有一段时间了，JSDelivr在国内的访问体验一直不好。</p><p>我做了个JSDelivr反代，访问速度上有明显提升。</p><p>反代域名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs text">jsdrp.ltdoge.top<br>jsdrp.vercel.app<br></code></pre></td></tr></table></figure><p>两个域名没什么区别，想用哪个用哪个，<a href="http://xn--cdn-ns9dr8t104ag5x.jsdelivr.net">反代的是cdn.jsdelivr.net</a>。使用时直接替换域名即可。比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">https://cdn.jsdelivr.net/npm/jquery@3.2.1/dist/jquery.min.js<br></code></pre></td></tr></table></figure><p>可以用以下两个url替换，二选一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">https://jsdrp.ltdoge.top/npm/jquery@3.2.1/dist/jquery.min.js<br>https://jsdrp.vercel.app/npm/jquery@3.2.1/dist/jquery.min.js<br></code></pre></td></tr></table></figure><p>稳定不跑路。</p>]]></content>
    
    
    <categories>
      
      <category>未分类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>华为搞机佬の充实亿天</title>
    <link href="/2022/03/23/%E5%8D%8E%E4%B8%BA%E6%90%9E%E6%9C%BA%E4%BD%AC%E3%81%AE%E5%85%85%E5%AE%9E%E4%BA%BF%E5%A4%A9/"/>
    <url>/2022/03/23/%E5%8D%8E%E4%B8%BA%E6%90%9E%E6%9C%BA%E4%BD%AC%E3%81%AE%E5%85%85%E5%AE%9E%E4%BA%BF%E5%A4%A9/</url>
    
    <content type="html"><![CDATA[<h1 id="0x00"><a class="markdownIt-Anchor" href="#0x00"></a> 0x00</h1><p class="note note-warning">此教程基于华为畅享10 Plus（STK-AL00）编写。不同机型请自行变换步骤。</p><p class="note note-danger">搞机有风险！搞机有风险！搞机有风险！没有救砖基础不要硬上！刷砖作者不负责！</p><p>众所周知，华为因其出色的保护机制让搞机佬们闻之色变。比如…</p><ul><li><p>BL解锁困难（2018年解锁码获取通道就已关闭，麒麟平台甚至无解锁码）</p></li><li><p>system修改困难（较新款机型的system分区采用华为自研erofs，此文件系统天生只读，也就是说镜像一旦打包完成就无法进行写入操作，无法重挂载为rw模式）</p></li><li><p>分区编辑困难（华为的设备分区和安卓标准是毫不重合，比如没有boot分区，recovery分区分为了recovery_ramdisk_a、recovery_vendor_a、recovery_vbmeta_a三个部分，这在其它机型上从未有之）</p></li><li><p>… …</p><p>所以各位搞机佬买华为之前一定要慎重，搞机买华为就是折磨自己。</p><p><img src="https://pic.imgdb.cn/item/623a72fc27f86abb2ac5dacd.jpg" alt="" /></p><p>但搞机佬无所畏惧  华为搞机走起</p><p><img src="https://pic.imgdb.cn/item/623a75c327f86abb2ad4f2d3.jpg" alt="" /></p><h1 id="0x01-解bl锁适用于麒麟平台"><a class="markdownIt-Anchor" href="#0x01-解bl锁适用于麒麟平台"></a> 0x01 解BL锁（适用于麒麟平台）</h1><p>解BL锁之前我们要把手机降级到EMUI10版本以下，否则刷了无锁BL也没用。究其原因，应该是Android 10引入的“超级分区”机制允许手机厂商把启动代码写入动态分配的超级分区中，原来固化的fastboot分区被弃用。刷写超级分区里的fastboot应该也可以奏效，但我从EMUI9升级到EMUI10时升级失败，这事先鸽了。</p><p>降级操作要通过华为手机助手进行，<a href="https://consumer.huawei.com/cn/support/hisuite/">点此跳转下载界面</a>。</p><p>下载华为手机助手后，点击“系统更新”：</p><p><img src="https://pic.imgdb.cn/item/623a7c9027f86abb2af6be2c.jpg" alt="" /></p><p>在升级按钮旁边有“切换到其它版本”的选项，我们通过那个选项将手机一步步降级到EMUI9（我手机已经降级到最低版本，没法截图），注意不能使用HiSuite Proxy之类的软件从过高版本系统一键降级到EMUI9，华为对跨版本降级做了限制，必须一版版降级。</p><p>前面提到，麒麟平台的华为是没有BL解锁码的，只能通过刷无锁BL解锁。</p><p>我们需要两个软件：<a href="https://hcu-client.com/">HCU Client</a>和<a href="https://www.dc-unlocker.com/file-list/DC-unlocker_softwares/DC_Phoenix">DC-Phoenix</a>，两个软件都需要加密狗或账号认证。这里推荐去闲鱼或淘宝之类的平台租用HCU账号，HCU Timed License和DC-Phoenix License是通用的。</p><p>然后，短接主板TP点进COM1.0模式。</p><p>第一步要先拆开手机后盖，我的方案是热风枪温度200℃，风速开满，对着手机边缘吹四五分钟，吸盘吸出一条缝（别想着从边缘硬抠，搞不下来）后撬棒接上，拆开手机。没有热风枪的小伙伴可以用吹风机代替。</p><p>拆后盖时要注意，如果你的手机是背部指纹，要注意保护指纹排线，搞断了就不好了。</p><p>拆开后盖后，拧下上屏蔽罩的螺丝，露出上部主板。有背部指纹排线的机型要用撬棒断开排线接口。</p><p><img src="https://pic.imgdb.cn/item/623a7a1127f86abb2aea736c.jpg" alt="网图，拆自己手机时没法拍照。点我跳转图源" /></p><p><strong>关机</strong>后，<a href="http://www.shuajibang.net/news/detail/39124">点这里查找你的机型对应的短接图</a>，用金属镊子把那个点和旁边的屏蔽罩连起来。</p><p><img src="https://pic.imgdb.cn/item/623a7e3627f86abb2afdf9cb.jpg" alt="" /></p><p>然后一手拿着镊子，一手长按电源键开机，约三秒后松开电源键。COM1.0模式下开机不振动。注意别插着数据线。</p><p>接着把手机连上电脑，打开设备管理器，如果看到“USB SER&quot;的设备就说明短接成功。</p><p><img src="https://pic.imgdb.cn/item/623a7f2827f86abb2a020588.jpg" alt="" /></p><p>不要急着打什么“牛逼驱动”，我打驱动打了一晚上都没搞好。</p><p><img src="https://pic.imgdb.cn/item/623a7f7e27f86abb2a038df0.jpg" alt="" /></p><p>右键USB SER，点“更新驱动程序”→“浏览我的电脑以查找驱动程序”→“让我从计算机上可用的驱动程序列表中选取”→“端口（COM和LPT）”→厂商选“Huawei Incorporated”，驱动选“HUAWEI USB COM 1.0”。注意这里的驱动没有版本号。</p><p><img src="https://pic.imgdb.cn/item/623a818027f86abb2a0b6d43.jpg" alt="" /></p><p>点下一页后，把弹出的不兼容提示关掉，驱动就正确安装了。下图表示COM1.0驱动已正确安装，图标上没有感叹号。</p></li></ul><p><img src="https://pic.imgdb.cn/item/623a81f627f86abb2a0dc0f4.jpg" alt="" /></p><p>然后打开HCU Client登录账号，模式选“Fastboot / Xloader (HiSilicon only)”，切换到第二个选项卡，选择你的CPU型号，把FBLOCK和Bootloader lock都选成unlocked。不要点Reboot after repair，待会还要用。</p><p><img src="https://pic.imgdb.cn/item/623a84a827f86abb2a1a38e4.jpg" alt="" /></p><p>选好之后点“Repair”，软件会给手机刷一个无锁BL。至此BL解锁完成。</p><h1 id="0x02-magisk-root"><a class="markdownIt-Anchor" href="#0x02-magisk-root"></a> 0x02 Magisk Root</h1><p>用HCU的账号登录DC-Phoenix，进eMMC Dump选项卡，点Read selected partitions，然后Read partition list。</p><p><img src="https://pic.imgdb.cn/item/623a853f27f86abb2a1c2df5.jpg" alt="" /></p><p>按住Ctrl键，然后点recovery_ramdisk_a、recovery_vbmeta_a、vbmeta_a，松开Ctrl键点Read partitions，软件会把这三个分区提取到软件根目录。我操作时引导验证自动关闭了，但为了防止出什么奇怪问题，还是提vbmeta重新关一下引导验证。</p><p>提取完成后，我们可以长按电源键10秒重启，可以在Update by TP选项卡里点Reboot，也可以走以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">fastboot reboot<br></code></pre></td></tr></table></figure><p>总之能重启就行。</p><p>重启后手机打开ADB调试，把提取出来的recovery_ramdisk_a传到手机上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb push /path/to/recovery_ramdisk_a.img /storage/emulated/0/Download/<br></code></pre></td></tr></table></figure><p>重启后<a href="https://github.com/topjohnwu/Magisk/releases/tag/v24.3">在GitHub Release界面下载Magisk的安装包</a>，在手机上通过Magisk修补镜像，这里不再赘述。</p><p>修补完成后，我们把修补过的镜像拉下来：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb pull /storage/emulated/0/Download/magisk_patched.img /path/to/save.img<br></code></pre></td></tr></table></figure><p>还是为防止出现什么奇怪问题，对于<strong>无法解FBLOCK</strong>（即HCU中输出Write FBLOCK for this model not supported）的机型，我推荐用DC-Phoenix刷临时无FBLOCK的BL。如果你认为你的机子有FBLOCK也可以动recovery、vbmeta这些东西…你可以逝一逝</p><p><img src="https://pic.imgdb.cn/item/623a89c227f86abb2a314d59.jpg" alt="" /></p><p>打开DC-Phoenix，切换到Update by TP选项卡，点Load and temporally unlock bootloader</p><p><img src="https://pic.imgdb.cn/item/623a8a9327f86abb2a34fa8e.jpg" alt="" /></p><p>在下边的Bootloader files里选你的CPU型号，然后Do job，软件会刷入一个无FBLOCK的BL，重启失效。</p><p>用以下指令刷写patch过的recovery，顺便关闭引导验证：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#通过adb进入fastboot时注意，不能adb reboot fastboot。用户空间下的fastbootd在安卓10才引入。请adb reboot bootloader</span><br>fastboot flash recovery_ramdisk_a /path/to/save.img<br>fastboot --disable-verity --disable-verification flash vbmeta_a /path/to/vbmeta_a.img<br>fastboot --disable-verity --disable-verification flash recovery_vbmeta_a /path/to/recovery_vbmeta_a.img<br><span class="hljs-comment">#注意是verity不是verify</span><br><span class="hljs-comment">#别被_a后缀骗了，部分机型不支持AB槽</span><br>fastboot reboot<br></code></pre></td></tr></table></figure><p>手机重启，打开Magisk App一看————</p><p style="font-size: 2rem">wdnmd, 版本获取失败？Magisk没刷上？？</p><p><img src="https://pic.imgdb.cn/item/623a8e1027f86abb2a434d67.jpg" alt="" /></p><p>我们的安装方式是“Magisk in Recovery”，按照官方文档，只有启动到Recovery时才会开启Magisk。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb reboot recovery<br></code></pre></td></tr></table></figure><p>如果操作正确，这个指令会重启到系统，而不是Recovery。对了，这种方式安装的Magisk不能通过第三方rec升降级。</p><p>现在打开Magisk App，就能获取到版本号了。</p><p><img src="https://pic.imgdb.cn/item/623a8f5527f86abb2a48d8ad.jpg" alt="" /></p><h1 id="0x03-system扩容失败-救砖"><a class="markdownIt-Anchor" href="#0x03-system扩容失败-救砖"></a> 0x03 system扩容失败 &amp; 救砖</h1><p class="note note-danger">    此篇为错误示范。前导知识：<br>    1. 华为在较新款机型的system分区都使用了自研的erofs文件系统。该系统在设计时就禁止写入，一旦镜像制作完成便无法写入，修改数据只能重新制作镜像。所以，在adb shell里重新挂载system分区对erofs无效。<br>    2. 华为的EMUI似乎将系统的部分组件放在了data分区下。自家recovery执行格式化时自然能认识，但第三方rec和fastboot不认。如果你打算继续使用EMUI，<b>不要在第三方工具随手双清</b>，轻则系统bug，重则砖。<br>    3. 华为手机除了recovery，还有一个叫eRecovery的系统恢复模式。进入方法：关闭手机，USB线连接电脑（电脑无需操作，保证数据线能传输数据就行），按住电源键+音量上键开机。此模式下，你可以连接wifi热点（仅支持2.4GHz wifi）从服务器下载完整系统包进行系统恢复。刷机刷砖时，可以尝试eRecovery救砖。<br>    4. 华为系统的分区表（也许是分区表）储存在一个叫ptable的分区里。华为卡刷包的base包里有ptable.img。<br>    5. parted操作分区前要先卸载对应分区。否则可能造成数据损毁。</p><p class="note note-danger"> 此扩容方法为错误示范，请勿模仿。</p><p>既然是搞机佬，不刷个第三方系统不舒服啊。</p><p><img src="https://pic.imgdb.cn/item/623a936027f86abb2a5ac314.jpg" alt="" /></p><p>可惜对华为设备的适配ROM少之又少。那怎么办呢？</p><p><img src="https://pic.imgdb.cn/item/623a93c727f86abb2a5c253b.jpg" alt="" /></p><p>Android 8.0引入了一个具有深远意义的功能————Project Treble。</p><p>在了解Project Treble之前，我们先了解一下它出现之前的系统更新流程：</p><ol><li>谷歌把新系统源码推送到AOSP</li><li>芯片制造商（高通等）对源码进行修改，使新系统能在自家芯片上正常工作。</li><li>芯片制造商把修改过的源码下发给OEM，厂商根据自身需求进一步定制。</li><li>OEM对新系统进行测试。测试无误后通过OTA推送给用户。</li></ol><p>但是芯片制造商有时也会碰到一些适配问题，OEM的开发进程有时也偏慢…整个过程花费的时间，导致安卓新版本发布后用户迟迟收不到推送。</p><p>Project Treble出现之前，厂商要对系统进行大量的底层更新、重构以及软件升级等操作，工作量巨大。而且每一版驱动和安卓版本是严格对应的，比如安卓6的驱动，放到安卓7上就无法使用。</p><p>Project Treble的作用就是解除这种限制，允许芯片厂商放出长期兼容的驱动，让它在以后的安卓版本中不经修改也能正常使用。而OEM的工作，就是在这层通用驱动上直接进行定制，缩短了工作量和适配时间。</p><p>随着Project Treble出现的，就是在安卓9及更高版本都适用的通用系统映像（Generic System Image，GSI）。它可以让Android OEM或ROM开发者进行设备测试，也可以让用户提前体验某个还没有进行适配的ROM。（跑的顺不顺利就不知道了）</p><p>这玩意好诶，搞一个玩玩。</p><p><img src="https://pic.imgdb.cn/item/623a9a2d27f86abb2a7770cd.jpg" alt="" /></p><p>啊…这…</p><p>还好提前备份了system_a，重新刷回去，系统正常启动。</p><p>后来进终端看了一下，system_a的大小只有1.8GB左右，而这个GSI有3GB多。</p><p>那得扩容一下system_a啊，就从userdata（即data分区）里分出4G塞给system_a。</p><p>因为我手机没有twrp，而且github上搜不到我手机的设备树，自行编译也编译不了。就从终端里分区罢</p><p><img src="https://pic.imgdb.cn/item/623a9b7427f86abb2a7d4797.jpg" alt="" /></p><p>help还没打出去呢，手机重启了，卡在BL界面了…然后无限重启，进不去系统。</p><p>这还了得，插线，电源键+音量上，进eRecovery恢复系统。起初一切都很顺利，但是…下包下到70%左右时…</p><p style="font-size: 2rem">eRecovery也崩溃重启了！</p><p><img src="https://pic.imgdb.cn/item/623a9cfb27f86abb2a812643.jpg" alt="" /></p><p>是不是哪里不对，把eRecovery搞坏了啊？</p><p>我刷面具之前备份过eRecovery和其它东西，全恢复过去看看</p><p><img src="https://pic.imgdb.cn/item/623a9d9527f86abb2a829e7d.jpg" alt="" /></p><p>恢复完重启，奇迹出现辽————</p><p>eRecovery进不去了</p><p><img src="https://pic.imgdb.cn/item/623a9e1027f86abb2a843d8a.jpg" alt="" /></p><p>重新连电池排线，走麒麟深刷救砖，摆渡下个卡刷包走起。华为的卡刷包没有payload.bin，也没有各种img（除了base包里的ptable.img），所有刷机文件都在update.app里。找个软件提取镜像，fastboot开刷…嗯？</p><p><img src="https://pic.imgdb.cn/item/623a9f0c27f86abb2a8701f8.jpg" alt="" /></p><p>204KB的system，刷个毛线</p><p><img src="https://pic.imgdb.cn/item/623aa58427f86abb2aa198a4.jpg" alt="" /></p><p>但就是在解包的时候，我看见base包里有ptable.img。既然是调整分区把手机调砖了，那恢复一下分区表也许能行…？</p><p><img src="https://pic.imgdb.cn/item/623aa60d27f86abb2aa3e9cd.jpg" alt="" /></p><p>重启之后进eRecovery，提示数据分区损坏严重。低格恢复系统之后手机正常开机，救砖成功</p><p><img src="https://pic.imgdb.cn/item/623aa68727f86abb2aa5ac61.jpg" alt="" /></p><h1 id="0x04-系统精简-优化-改造"><a class="markdownIt-Anchor" href="#0x04-系统精简-优化-改造"></a> 0x04 系统精简 &amp; 优化 &amp; 改造</h1><p>既然GSI刷不了，那就在原系统上做点改造吧。</p><h2 id="0x041-xposed实现"><a class="markdownIt-Anchor" href="#0x041-xposed实现"></a> 0x04+1   Xposed实现</h2><p>既然装了Magisk，不带个Xposed咋行？Magisk App开启Zygisk，从<a href="https://github.com/LSPosed/LSPosed/releases/tag/v1.7.2">LSPosed Release</a>界面下个Zygisk版本的LSPosed，App界面刷入，114514岁的老奶奶都会的操作</p><p><img src="https://pic.imgdb.cn/item/623aa7f827f86abb2aac16dc.jpg" alt="" /></p><p>但是在我手机上并没有自动安装LSPosed Manager。如果在你的机型上也没有自动安装管理程序，打开模块压缩包，里面有个manager.apk，手动安装即可。</p><p>为啥不用EdXposed？riru都停更了，用啥EdXp</p><h2 id="0x042-谷歌服务"><a class="markdownIt-Anchor" href="#0x042-谷歌服务"></a> 0x04+2   谷歌服务</h2><p>EMUI是没有内置谷歌框架的。这种情况下装谷歌服务的比较流行的办法是OpenGApps，但考虑到大部分华为机型都没有twrp适配，这里用microG安装。</p><p>按照microg_installer_revived仓库中README的指引，我们要先下载一个修补过的Play商店（<a href="https://nanolx.org/fdroid/repo/Phonesky_132.apk">点我下载</a>），然后把它放到/data/adb/Phonesky.apk。这一步最好不要用adb操作，adb似乎无权操作/data目录。建议用各种文件管理器进行复制，或者用Termux之类的终端模拟器进行操作。</p><p>放好Play商店之后，在<a href="https://github.com/nift4/microg_installer_revived/releases/tag/v2.6.2-0">Release界面</a>下载最新版的Magisk模块，App刷入即可。这个模块似乎不会自动安装microG Service Proxy，你还要<a href="https://microg.org/download.html">去官网</a>手动安装一下。</p><p>安装完Magisk模块，我们还要对microG进行签名伪造，否则其它应用程序不认。</p><p>在Xposed Repo界面<a href="https://repo.xposed.info/module/com.thermatk.android.xf.fakegapps">下载FakeGApps</a>，LSPosed中启用，安装，定义域设置为系统框架。</p><p><img src="https://pic.imgdb.cn/item/623aab5927f86abb2abbaf3b.jpg" alt="" /></p><p>对了，LSPosed不像EdXposed一样默认全局作用域，你每装一个模块都要手动设置它的作用域。不支持一键全选。</p><p>重启手机之后，打开桌面上的microG Settings里的Self-Check，所有选项都打勾就证明配置正确。如果有权限问题（开头是Permission的那些），点一下授权就好了。</p><p><img src="https://pic.imgdb.cn/item/623aac0527f86abb2abef2c9.jpg" alt="" /></p><p>退回软件界面，点Add Google Account，登录谷歌账号就能用谷歌服务了。记得魔法上网。</p><h2 id="0x043-淦华为桌面"><a class="markdownIt-Anchor" href="#0x043-淦华为桌面"></a> 0x04+3   淦！华为桌面！</h2><p>总是感觉EMUI自带的桌面不太好看，想装一个第三方桌面，但是选择默认程序的时候，桌面那一项只有华为桌面。后来去摆渡一查，原来是EMUI9为“改善手机体验保护用户的权益，不再让<strong>劣质</strong>第三方桌面为非作歹”，禁止了<strong>所有</strong>第三方桌面的使用。</p><p>那，用万能的adb处理一下？</p><p><img src="https://pic.imgdb.cn/item/623aad3b27f86abb2ac43fe7.jpg" alt="" /></p><p><img src="https://pic.imgdb.cn/item/623aae8f27f86abb2aca6d6e.jpg" alt="" /></p><p><img src="https://pic.imgdb.cn/item/623aaed327f86abb2acbacfc.jpg" alt="" /></p><p>pm指令所有和应用停用/启用（包括suspend，hide，disable-user这些）的操作我都试过了，竟没有一个起作用</p><p><img src="https://pic.imgdb.cn/item/623aaf5227f86abb2acda268.jpg" alt="" /></p><p>那，动点粗，也就是说把system重挂载为rw，然后把/system/app中华为桌面对应的安装包删掉？</p><p>别想了，system分区是erofs</p><p><img src="https://pic.imgdb.cn/item/623aafdc27f86abb2ad00c24.jpg" alt="" /></p><p>但是，动不了system分区，我们有Magisk啊！</p><p>Magisk的原理是，在系统启动时挂载自己的镜像，构建出了一个在system分区基础上能够自由添加、删除、修改的“平行空间”，所有操作都在系统启动时完成，没有对system进行任何修改。我们做个Magisk模块把华为桌面删掉，不就相当于把华为桌面移出/system了吗？</p><p>依照<a href="https://topjohnwu.github.io/Magisk/guides.html">Magisk官方开发指南</a>，module.prop内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">id=FxxkHWLauncher<br>name=淦！华为桌面！<br>version=NoOneCares<br>versionCode=1<br>author=LtD0gE<br>description=淦！华为桌面！<br></code></pre></td></tr></table></figure><p>然后在module.prop所在目录创建以下目录结构：</p><p><img src="https://pic.imgdb.cn/item/623ab43727f86abb2ae17d43.jpg" alt="" /></p><p>其中HwLauncher6.apk为空文件。</p><p>把module.prop和system文件夹打包成zip，Magisk刷入即可屏蔽华为桌面。</p><p class="note note-warning">刷写前一定 一定 一定 记得提前安装好一个第三方桌面！！！</p><p>刷写完成后重启手机，即可进入第三方桌面。这里我选择年度最佳Android / iOS应用开发商（？）微软推出的微软桌面。</p><h2 id="0x044-系统精简"><a class="markdownIt-Anchor" href="#0x044-系统精简"></a> 0x04+4 系统精简</h2><p>原版EMUI是带了像花粉俱乐部，华为商城、智能搜索这些预装应用的，我日常生活中用不到，但它又时不时推点广告，用root精简掉。</p><p>adb指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb shell pm uninstall --user 0 &lt;应用包名&gt;<br><span class="hljs-comment">#如adb shell pm uninstall --user 0 com.huawei.browser卸载华为浏览器，你家浏览器连打开GitHub都有渲染问题</span><br></code></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/623ab65b27f86abb2aea7cd3.jpg" alt="" /></p><h1 id="0x05"><a class="markdownIt-Anchor" href="#0x05"></a> 0x05</h1><p>搞完记得弄点双面胶把手机后盖粘起来，靠你吹后盖留下的那点胶打会原神就烧开胶了</p><p>不粘也无所谓，套个透明手机壳当个探索版后盖也不错</p><p>此外还可以装Scene，Konabess（麒麟平台无效）之类的软件超超频，干干温控啥的，有root权限👴就是老大，👴想怎么着就怎么着.jpg</p><p>小垃圾花了好几天时间淦华为出了篇文章，欢迎各位dalao指导 / 纠正 <s>/嘲笑</s></p><p><img src="https://pic.imgdb.cn/item/623ab80527f86abb2af20770.jpg" alt="" /></p>]]></content>
    
    
    <categories>
      
      <category>未分类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>使用GitHub与Hexo搭建静态博客</title>
    <link href="/2022/02/04/%E4%BD%BF%E7%94%A8github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/02/04/%E4%BD%BF%E7%94%A8github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="0x00"><a class="markdownIt-Anchor" href="#0x00"></a> 0x00</h1><p>相信各位已经发现了，这个网站在2年多之后又迎来了一次大改版。</p><p>为什么？因为我之前的服务器被删库了，数据恢复不出来。（悲）</p><p>因此，我用Hexo把网站改成了静态站点，并将作为以后主要的博客程序。</p><p>之前的20多篇文章有空就会恢复啦，不用担心~</p><h1 id="0x01-初始化"><a class="markdownIt-Anchor" href="#0x01-初始化"></a> 0x01  初始化</h1><p><em>此教程依作者使用习惯，主要面向Linux用户。Windows用户请使用WSL或自行安装相关组件的Windows版本（如Windows版Git或Github Desktop）。</em></p><p>首先我们要安装NodeJS运行环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">sudo apt-get install nodejs npm  <span class="hljs-comment">#这是Linux的安装命令，Windows用户请去官网下载</span><br></code></pre></td></tr></table></figure><p>需要注意的是有些Linux发行版的NodeJS可能不是最新版本。我们需要到<a href="https://nodejs.org/en/download/">NodeJS官网</a>去下载LTS版本的程序。</p><p><img src="https://pic.imgdb.cn/item/61fcf66a2ab3f51d91727140.jpg" alt="" /></p><p>Windows用户直接通过下载的msi文件安装即可，Linux用户则需要把解压后的文件复制到/usr目录下。</p><p><img src="https://pic.imgdb.cn/item/61fcf6fa2ab3f51d9172fcc0.jpg" alt="" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo cp NodeJS解压路径 /usr<br>sudo npm i npm@latest -g  <span class="hljs-comment">#升级npm至最新版</span><br></code></pre></td></tr></table></figure><p>随后安装Hexo，然后初始化博客程序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo npm i hexo-cli -g<br>hexo init 要存放博客的文件夹名，下文以blog代替<br><span class="hljs-built_in">cd</span> blog<br>sudo npm i<br></code></pre></td></tr></table></figure><p>然后使用Visual Studio Code等代码编辑器编辑blog文件夹内的_config.yml，配置文件说明在此：<a href="https://hexo.io/zh-cn/docs/configuration">配置 | Hexo</a>，可以将<a href="https://github.com/LtD0gE/LtD0gE-hexo-ci-cd/blob/main/_config.yml">我的配置文件</a>作为参考。</p><p>配置好后，我们可以在本地启动服务器进行测试。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure><p>然后访问http://localhost:4000/查看配置是否正确。</p><h1 id="0x02-主题"><a class="markdownIt-Anchor" href="#0x02-主题"></a> 0x02  主题</h1><p><a href="https://hexo.io/themes/index.html">Hexo主题官网</a>提供大量主题下载。</p><p><img src="https://pic.imgdb.cn/item/61fcfae12ab3f51d9176d15d.jpg" alt="" /></p><p>点击任意主题下面的蓝色主题名可以跳转到对应主题的GitHub界面，我们可以根据README.md里的安装说明安装主题。比如我网站安装的主题是Fluid，根据其<a href="https://github.com/fluid-dev/hexo-theme-fluid">GitHub页面</a>的说明，通过npm安装主题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> blog<br>sudo npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>然后在blog目录下新建_config.fluid.yml文件，把<a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">这个配置文件</a>的内容复制进去。配置的注释里已经写的很详细了，每个人的需求也不同，这里不再给出具体示例。</p><p>如果使用Fluid主题且使用APlayer等音乐播放器的话，可以参照<a href="https://github.com/fluid-dev/hexo-theme-fluid/issues/651">我的这个issue</a>给主题添加Pjax，目前没有遇到什么问题。需要注意要在主题配置文件里关闭“回到顶部”按钮，否则控制台会一直报错（相关事件已在pjax中重载，按钮的显示没有问题，如果不介意的话可以开启）。需要注意的是这种做法并不被Fluid官方所采纳（原因见<a href="https://github.com/fluid-dev/hexo-theme-fluid/issues/189#issuecomment-1029742263">issue#189 (comment)</a>）。</p><p>如果你想使用音乐播放器又不想在跳转页面被打断的话，可以考虑使用NexT主题，文档链接<a href="https://theme-next.js.org/docs/getting-started/">在此</a>。</p><h1 id="0x03-写作-发布"><a class="markdownIt-Anchor" href="#0x03-写作-发布"></a> 0x03  写作 &amp; 发布</h1><p>使用以下命令初始化文档。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;文章标题&quot;</span><br></code></pre></td></tr></table></figure><p>然后在博客目录下source/_posts文件夹中会生成以文章标题命名的.md文件。文件开头会有一些配置内容：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: HelloWorld   #文章标题<br>date: 2077-01-01 11:11:11    #文章发布时间<br>updated: 2077-01-01 12:12:12   #文章更新时间<br>comments: true   #是否开启评论<br>tags: aaa   #文章标签，不适用于单独页面<br>categories: bbb   #文章分类，不适用于分页<br>permalink: ccc   #文章永久链接，覆盖<span class="hljs-emphasis">_config.yml中的永久链接配置</span><br><span class="hljs-emphasis">excerpt: CYBERPUNK   #文章摘要</span><br><span class="hljs-emphasis">lang: zh-CN   #页面语言</span><br><span class="hljs-emphasis">#按需修改，不需要的项目可以删除</span><br><span class="hljs-emphasis">---</span><br></code></pre></td></tr></table></figure><p>然后使用Typora等Markdown编辑器打开刚刚生成的.md文件，开始写作：</p><p><img src="https://pic.imgdb.cn/item/61fd338f2ab3f51d91ac05da.jpg" alt="" /></p><p>写作完成后，执行以下命令启动服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure><p>然后在http://localhost:4000/查看页面效果。</p><h1 id="0x04-部署"><a class="markdownIt-Anchor" href="#0x04-部署"></a> 0x04  部署</h1><p>只在本地跑服务器可不行，得挂到服务器上遛一遛才可以。</p><p>如果你有自己的服务器，可以用以下命令生成静态文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br></code></pre></td></tr></table></figure><p>然后把public目录下的所有文件复制到服务器的网站根目录，这样就算完成部署了。</p><p>但这篇文章的目的是用<strong>GitHub</strong>搭建博客，也就是依托GitHub Pages的免费服务进行建站。白嫖的东西不香吗？</p><p>新建一个Git仓库，然后在Settings选项卡中，找到Pages设置，开启GitHub Pages服务：</p><p><img src="https://pic.imgdb.cn/item/61fd35522ab3f51d91addef3.jpg" alt="" /></p><p>如果你没有自己的域名，&quot;www.ltdoge.top&quot;的框可以不填，只保存Source选项即可。</p><p>开启GitHub Pages后，我们就可以通过Github Desktop等软件把hexo生成的静态页面上传到GitHub仓库，完成部署。</p><p>但，还不够简便。</p><p>GitHub近几年对公共仓库开放了GitHub Actions功能，简单来说就是免费提供一台服务器，可以在某个触发条件（如向仓库推送代码时）自动执行某一脚本，进行持续集成/持续部署。</p><p>这东西好诶，再开一个仓库，在新仓库根目录下创建.github/workflows文件夹，接着在里面新建一个Hexo.yml文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">HexoCI/CD</span>  <span class="hljs-comment">#action名称</span><br><span class="hljs-attr">on:</span> [<span class="hljs-string">push</span>]   <span class="hljs-comment">#触发条件</span><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">GenerateAndDeploy:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>   <span class="hljs-comment">#运行环境，ubuntu-latest即ubuntu 20.04</span><br>    <span class="hljs-attr">steps:</span> <br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Checkout&quot;</span>   <span class="hljs-comment">#克隆仓库代码</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">&quot;hexo&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Initalize Node.JS environment&quot;</span>  <span class="hljs-comment">#安装NodeJS运行环境</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          sudo apt install nodejs npm curl</span><br><span class="hljs-string">          wget -O ./nodejs.tar.xz https://nodejs.org/dist/v16.13.2/node-v16.13.2-linux-x64.tar.xz</span><br><span class="hljs-string">          tar -xvf ./nodejs.tar.xz</span><br><span class="hljs-string">          cd node-v16.13.2-linux-x64</span><br><span class="hljs-string">          sudo cp -R ./* /usr</span><br><span class="hljs-string">          sudo npm install -g npm@latest</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Install Hexo and Generate&quot;</span>   <span class="hljs-comment">#安装hexo，生成静态页面</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          sudo npm install -g hexo-cli</span><br><span class="hljs-string">          cd $GITHUB_WORKSPACE/hexo</span><br><span class="hljs-string">          hexo clean</span><br><span class="hljs-string">          hexo generate</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Deploy to Github Pages&quot;</span>   <span class="hljs-comment">#部署至GitHub Pages</span><br>        <span class="hljs-attr">if:</span> <span class="hljs-string">success()</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">crazy-max/ghaction-github-pages@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">target_branch:</span> <span class="hljs-string">main</span>   <span class="hljs-comment">#依据个人设置修改，大部分是master</span><br>          <span class="hljs-attr">build_dir:</span> <span class="hljs-string">hexo/public</span><br>          <span class="hljs-attr">repo:</span> <span class="hljs-string">&quot;LtD0gE/www.ltdoge.top&quot;</span>   <span class="hljs-comment">#格式：Git用户名/Pages仓库名</span><br>          <span class="hljs-attr">keep_history:</span> <span class="hljs-literal">true</span>   <span class="hljs-comment">#是否保留历史，即以commit形式提交而不是强制推送</span><br>          <span class="hljs-attr">allow_empty_commit:</span> <span class="hljs-literal">false</span>   <span class="hljs-comment">#是否允许空commit</span><br>          <span class="hljs-attr">commit_message:</span> <span class="hljs-string">&quot;Automatic Deploy&quot;</span>    <span class="hljs-comment">#commit时的信息</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">GH_PAT:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GH_PAT</span> <span class="hljs-string">&#125;&#125;</span>   <span class="hljs-comment">#Github Personal Access Token，需要保存在仓库secrets中，获取方法：https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Purge Cloudflare Cache&quot;</span>   <span class="hljs-comment">#清除CloudFlare缓存，如果没有用他们家CDN需要把这一步骤删去</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          curl -X POST &quot;https://api.cloudflare.com/client/v4/zones/CloudFlare仪表盘里的ZoneID/purge_cache&quot; \</span><br><span class="hljs-string">          -H &quot;X-Auth-Email: CloudFlare注册邮箱&quot;      \</span><br><span class="hljs-string">          -H &quot;X-Auth-Key: $&#123;&#123; secrets.CF_API_KEY &#125;&#125;&quot; \</span><br><span class="hljs-string">          -H &quot;Content-Type: application/json&quot;      \</span><br><span class="hljs-string">          --data &#x27;&#123;&quot;purge_everything&quot;:true&#125;&#x27;</span><br><span class="hljs-string"></span>        <span class="hljs-comment"># $&#123;&#123; secrets.CF_API_KEY &#125;&#125;为CloudFlare Global API KEY，获取方法：https://lighti.me/5560.html，同样需要保存到仓库里</span><br></code></pre></td></tr></table></figure><p>修改完配置文件后，还需要在仓库的secrets里添加Github Personal Access Token：</p><p><img src="https://pic.imgdb.cn/item/61fd397b2ab3f51d91b2480a.jpg" alt="" /></p><p><img src="https://pic.imgdb.cn/item/61fd39a32ab3f51d91b27245.jpg" alt="" /></p><p>注意GH_PAT要和配置文件里的变量名保持一致。如果要清除CloudFlare CDN缓存的话还需要把CF的API Key也添加进secrets。</p><p>这些配置做好之后，把blog目录下的所有文件推送到刚刚创建的仓库，Actions就会自动开始构建。构建完成后，网站便会自动发布。</p><p><img src="https://pic.imgdb.cn/item/61fd3a302ab3f51d91b30935.jpg" alt="" /></p><h1 id="0x05"><a class="markdownIt-Anchor" href="#0x05"></a> 0x05</h1><p>说到Fluid主题的Pjax，目前仍有一个问题就是控制台里“回到顶部”按钮的报错。如果有dalao在这方面有什么想法，欢迎去</p><p><a href="https://github.com/fluid-dev/hexo-theme-fluid/issues/651">issue</a>下面留言~</p><p>之前的文章有空就会恢复一部分，farewell~</p>]]></content>
    
    
    <categories>
      
      <category>未分类</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PicTest</title>
    <link href="/2022/02/01/pictest/"/>
    <url>/2022/02/01/pictest/</url>
    
    <content type="html"><![CDATA[<h1 id="lazyload-pjax-test"><a class="markdownIt-Anchor" href="#lazyload-pjax-test"></a> lazyload-PJAX test.</h1><p><img src="https://pic.imgdb.cn/item/614f39db2ab3f51d912e1901.jpg" alt="testPic,LtD0gE All Rights Reserved." /></p>]]></content>
    
    
    
  </entry>
  
  
  
  
  
  
  <entry>
    <title>关于</title>
    <link href="/"/>
    <url>/</url>
    
    <content type="html"><![CDATA[<p>没写，懒了</p>]]></content>
    
  </entry>
  
  
  
</search>
