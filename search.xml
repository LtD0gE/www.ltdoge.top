<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用GitHub与Hexo搭建静态博客</title>
      <link href="/2022/02/04/%E4%BD%BF%E7%94%A8github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/02/04/%E4%BD%BF%E7%94%A8github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="0x00"><a class="markdownIt-Anchor" href="#0x00"></a> 0x00</h1><p>相信各位已经发现了，这个网站在2年多之后又迎来了一次大改版。</p><p>为什么？因为我之前的服务器被删库了，数据恢复不出来。（悲）</p><p>因此，我用Hexo把网站改成了静态站点，并将作为以后主要的博客程序。</p><p>之前的20多篇文章有空就会恢复啦，不用担心~</p><h1 id="0x01-初始化"><a class="markdownIt-Anchor" href="#0x01-初始化"></a> 0x01  初始化</h1><p><em>此教程依作者使用习惯，主要面向Linux用户。Windows用户请使用WSL或自行安装相关组件的Windows版本（如Windows版Git或Github Desktop）。</em></p><p>首先我们要安装NodeJS运行环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">sudo apt-get install nodejs npm  <span class="hljs-comment">#这是Linux的安装命令，Windows用户请去官网下载</span><br></code></pre></td></tr></table></figure><p>需要注意的是有些Linux发行版的NodeJS可能不是最新版本。我们需要到<a href="https://nodejs.org/en/download/">NodeJS官网</a>去下载LTS版本的程序。</p><p><img src="https://pic.imgdb.cn/item/61fcf66a2ab3f51d91727140.jpg" alt="" /></p><p>Windows用户直接通过下载的msi文件安装即可，Linux用户则需要把解压后的文件复制到/usr目录下。</p><p><img src="https://pic.imgdb.cn/item/61fcf6fa2ab3f51d9172fcc0.jpg" alt="" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo cp NodeJS解压路径 /usr<br>sudo npm i npm@latest -g  <span class="hljs-comment">#升级npm至最新版</span><br></code></pre></td></tr></table></figure><p>随后安装Hexo，然后初始化博客程序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo npm i hexo-cli -g<br>hexo init 要存放博客的文件夹名，下文以blog代替<br><span class="hljs-built_in">cd</span> blog<br>sudo npm i<br></code></pre></td></tr></table></figure><p>然后使用Visual Studio Code等代码编辑器编辑blog文件夹内的_config.yml，配置文件说明在此：<a href="https://hexo.io/zh-cn/docs/configuration">配置 | Hexo</a>，可以将<a href="https://github.com/LtD0gE/LtD0gE-hexo-ci-cd/blob/main/_config.yml">我的配置文件</a>作为参考。</p><p>配置好后，我们可以在本地启动服务器进行测试。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure><p>然后访问http://localhost:4000/查看配置是否正确。</p><h1 id="0x02-主题"><a class="markdownIt-Anchor" href="#0x02-主题"></a> 0x02  主题</h1><p><a href="https://hexo.io/themes/index.html">Hexo主题官网</a>提供大量主题下载。</p><p><img src="https://pic.imgdb.cn/item/61fcfae12ab3f51d9176d15d.jpg" alt="" /></p><p>点击任意主题下面的蓝色主题名可以跳转到对应主题的GitHub界面，我们可以根据README.md里的安装说明安装主题。比如我网站安装的主题是Fluid，根据其<a href="https://github.com/fluid-dev/hexo-theme-fluid">GitHub页面</a>的说明，通过npm安装主题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> blog<br>sudo npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>然后在blog目录下新建_config.fluid.yml文件，把<a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">这个配置文件</a>的内容复制进去。配置的注释里已经写的很详细了，每个人的需求也不同，这里不再给出具体示例。</p><p>如果使用Fluid主题且使用APlayer等音乐播放器的话，可以参照<a href="https://github.com/fluid-dev/hexo-theme-fluid/issues/651">我的这个issue</a>给主题添加Pjax，目前没有遇到什么问题。需要注意要在主题配置文件里关闭“回到顶部”按钮，否则控制台会一直报错（相关事件已在pjax中重载，按钮的显示没有问题，如果不介意的话可以开启）。需要注意的是这种做法并不被Fluid官方所采纳（原因见<a href="https://github.com/fluid-dev/hexo-theme-fluid/issues/189#issuecomment-1029742263">issue#189 (comment)</a>）。</p><p>如果你想使用音乐播放器又不想在跳转页面被打断的话，可以考虑使用NexT主题，文档链接<a href="https://theme-next.js.org/docs/getting-started/">在此</a>。</p><h1 id="0x03-写作-发布"><a class="markdownIt-Anchor" href="#0x03-写作-发布"></a> 0x03  写作 &amp; 发布</h1><p>使用以下命令初始化文档。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new <span class="hljs-string">&quot;文章标题&quot;</span><br></code></pre></td></tr></table></figure><p>然后在博客目录下source/_posts文件夹中会生成以文章标题命名的.md文件。文件开头会有一些配置内容：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs markdown">---<br>title: HelloWorld   #文章标题<br>date: 2077-01-01 11:11:11    #文章发布时间<br>updated: 2077-01-01 12:12:12   #文章更新时间<br>comments: true   #是否开启评论<br>tags: aaa   #文章标签，不适用于单独页面<br>categories: bbb   #文章分类，不适用于分页<br>permalink: ccc   #文章永久链接，覆盖<span class="hljs-emphasis">_config.yml中的永久链接配置</span><br><span class="hljs-emphasis">excerpt: CYBERPUNK   #文章摘要</span><br><span class="hljs-emphasis">lang: zh-CN   #页面语言</span><br><span class="hljs-emphasis">#按需修改，不需要的项目可以删除</span><br><span class="hljs-emphasis">---</span><br></code></pre></td></tr></table></figure><p>然后使用Typora等Markdown编辑器打开刚刚生成的.md文件，开始写作：</p><p><img src="https://pic.imgdb.cn/item/61fd338f2ab3f51d91ac05da.jpg" alt="" /></p><p>写作完成后，执行以下命令启动服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server<br></code></pre></td></tr></table></figure><p>然后在http://localhost:4000/查看页面效果。</p><h1 id="0x04-部署"><a class="markdownIt-Anchor" href="#0x04-部署"></a> 0x04  部署</h1><p>只在本地跑服务器可不行，得挂到服务器上遛一遛才可以。</p><p>如果你有自己的服务器，可以用以下命令生成静态文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo generate<br></code></pre></td></tr></table></figure><p>然后把public目录下的所有文件复制到服务器的网站根目录，这样就算完成部署了。</p><p>但这篇文章的目的是用<strong>GitHub</strong>搭建博客，也就是依托GitHub Pages的免费服务进行建站。白嫖的东西不香吗？</p><p>新建一个Git仓库，然后在Settings选项卡中，找到Pages设置，开启GitHub Pages服务：</p><p><img src="https://pic.imgdb.cn/item/61fd35522ab3f51d91addef3.jpg" alt="" /></p><p>如果你没有自己的域名，&quot;www.ltdoge.top&quot;的框可以不填，只保存Source选项即可。</p><p>开启GitHub Pages后，我们就可以通过Github Desktop等软件把hexo生成的静态页面上传到GitHub仓库，完成部署。</p><p>但，还不够简便。</p><p>GitHub近几年对公共仓库开放了GitHub Actions功能，简单来说就是免费提供一台服务器，可以在某个触发条件（如向仓库推送代码时）自动执行某一脚本，进行持续集成/持续部署。</p><p>这东西好诶，再开一个仓库，在新仓库根目录下创建.github/workflows文件夹，接着在里面新建一个Hexo.yml文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">HexoCI/CD</span>  <span class="hljs-comment">#action名称</span><br><span class="hljs-attr">on:</span> [<span class="hljs-string">push</span>]   <span class="hljs-comment">#触发条件</span><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">GenerateAndDeploy:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>   <span class="hljs-comment">#运行环境，ubuntu-latest即ubuntu 20.04</span><br>    <span class="hljs-attr">steps:</span> <br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Checkout&quot;</span>   <span class="hljs-comment">#克隆仓库代码</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">&quot;hexo&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Initalize Node.JS environment&quot;</span>  <span class="hljs-comment">#安装NodeJS运行环境</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          sudo apt install nodejs npm curl</span><br><span class="hljs-string">          wget -O ./nodejs.tar.xz https://nodejs.org/dist/v16.13.2/node-v16.13.2-linux-x64.tar.xz</span><br><span class="hljs-string">          tar -xvf ./nodejs.tar.xz</span><br><span class="hljs-string">          cd node-v16.13.2-linux-x64</span><br><span class="hljs-string">          sudo cp -R ./* /usr</span><br><span class="hljs-string">          sudo npm install -g npm@latest</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Install Hexo and Generate&quot;</span>   <span class="hljs-comment">#安装hexo，生成静态页面</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          sudo npm install -g hexo-cli</span><br><span class="hljs-string">          cd $GITHUB_WORKSPACE/hexo</span><br><span class="hljs-string">          hexo clean</span><br><span class="hljs-string">          hexo generate</span><br><span class="hljs-string"></span>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Deploy to Github Pages&quot;</span>   <span class="hljs-comment">#部署至GitHub Pages</span><br>        <span class="hljs-attr">if:</span> <span class="hljs-string">success()</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">crazy-max/ghaction-github-pages@v2</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">target_branch:</span> <span class="hljs-string">main</span>   <span class="hljs-comment">#依据个人设置修改，大部分是master</span><br>          <span class="hljs-attr">build_dir:</span> <span class="hljs-string">hexo/public</span><br>          <span class="hljs-attr">repo:</span> <span class="hljs-string">&quot;LtD0gE/www.ltdoge.top&quot;</span>   <span class="hljs-comment">#格式：Git用户名/Pages仓库名</span><br>          <span class="hljs-attr">keep_history:</span> <span class="hljs-literal">true</span>   <span class="hljs-comment">#是否保留历史，即以commit形式提交而不是强制推送</span><br>          <span class="hljs-attr">allow_empty_commit:</span> <span class="hljs-literal">false</span>   <span class="hljs-comment">#是否允许空commit</span><br>          <span class="hljs-attr">commit_message:</span> <span class="hljs-string">&quot;Automatic Deploy&quot;</span>    <span class="hljs-comment">#commit时的信息</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-attr">GH_PAT:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GH_PAT</span> <span class="hljs-string">&#125;&#125;</span>   <span class="hljs-comment">#Github Personal Access Token，需要保存在仓库secrets中，获取方法：https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Purge Cloudflare Cache&quot;</span>   <span class="hljs-comment">#清除CloudFlare缓存，如果没有用他们家CDN需要把这一步骤删去</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          curl -X POST &quot;https://api.cloudflare.com/client/v4/zones/CloudFlare仪表盘里的ZoneID/purge_cache&quot; \</span><br><span class="hljs-string">          -H &quot;X-Auth-Email: CloudFlare注册邮箱&quot;      \</span><br><span class="hljs-string">          -H &quot;X-Auth-Key: $&#123;&#123; secrets.CF_API_KEY &#125;&#125;&quot; \</span><br><span class="hljs-string">          -H &quot;Content-Type: application/json&quot;      \</span><br><span class="hljs-string">          --data &#x27;&#123;&quot;purge_everything&quot;:true&#125;&#x27;</span><br><span class="hljs-string"></span>        <span class="hljs-comment"># $&#123;&#123; secrets.CF_API_KEY &#125;&#125;为CloudFlare Global API KEY，获取方法：https://lighti.me/5560.html，同样需要保存到仓库里</span><br></code></pre></td></tr></table></figure><p>修改完配置文件后，还需要在仓库的secrets里添加Github Personal Access Token：</p><p><img src="https://pic.imgdb.cn/item/61fd397b2ab3f51d91b2480a.jpg" alt="" /></p><p><img src="https://pic.imgdb.cn/item/61fd39a32ab3f51d91b27245.jpg" alt="" /></p><p>注意GH_PAT要和配置文件里的变量名保持一致。如果要清除CloudFlare CDN缓存的话还需要把CF的API Key也添加进secrets。</p><p>这些配置做好之后，把blog目录下的所有文件推送到刚刚创建的仓库，Actions就会自动开始构建。构建完成后，网站便会自动发布。</p><p><img src="https://pic.imgdb.cn/item/61fd3a302ab3f51d91b30935.jpg" alt="" /></p><h1 id="0x05"><a class="markdownIt-Anchor" href="#0x05"></a> 0x05</h1><p>说到Fluid主题的Pjax，目前仍有一个问题就是控制台里“回到顶部”按钮的报错。如果有dalao在这方面有什么想法，欢迎去</p><p><a href="https://github.com/fluid-dev/hexo-theme-fluid/issues/651">issue</a>下面留言~</p><p>之前的文章有空就会恢复一部分，farewell~</p>]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PicTest</title>
      <link href="/2022/02/01/pictest/"/>
      <url>/2022/02/01/pictest/</url>
      
        <content type="html"><![CDATA[<h1 id="lazyload-pjax-test"><a class="markdownIt-Anchor" href="#lazyload-pjax-test"></a> lazyload-PJAX test.</h1><p><img src="https://pic.imgdb.cn/item/614f39db2ab3f51d912e1901.jpg" alt="testPic,LtD0gE All Rights Reserved." /></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
